library(geomorph)
library(rgl)
# Mac Users might need to install XQuartz for this package to work.
library(borealis)
library(car)
library(Evomorph)
library(ggpubr)
library(ggrepel)
library(rstatix)
setwd("Documents")
populations <- c("ZOP")
library(tidyverse)
library(borealis)
# Importing Left wings
Left_Wings <- list()
for (i in populations){
  .txt <- paste0("coord_", i, "_Left.txt")
  
  # Check if the file exists
  if (file.exists(.txt)) {
    Left_Wings[[i]] <- read.csv(.txt, sep = "\t", header = FALSE)
  } else {
    message(paste("File", .txt, "not found. Skipping..."))
  }
}
Left_Wings <- bind_rows(Left_Wings, .id = "populations") %>%
  arrange(V1)

# Importing Right wings
Right_Wings <- list()
for (i in populations){
  .txt <- paste0("coord_", i, "_Right.txt")
  Right_Wings[[i]] <- read.csv(.txt, sep = "\t", header = FALSE)
}
Right_Wings <- bind_rows(Right_Wings, .id = "populations")%>%
  arrange(V1)

# Mirror one coordinate of the Right Wings to allow for Procrustes Alignment later.
mirror <- c("V2", "V4", "V6", "V8", "V10", "V12", "V14", "V16", "V18", "V20", "V22", "V24", "V26", "V28", "V30")
Right_Wings <- Right_Wings %>%
  mutate(across(all_of(mirror), ~ .x *-1))

all.equal(Left_Wings$groups, Right_Wings$groups)
all.equal(Left_Wings$V1, Right_Wings$V1)
Average_Wings <- Left_Wings[, 1:2]
Average_Wings[,3:32] <- Left_Wings[,3:32] - Right_Wings[,3:32]


oldcolnames <- colnames(Average_Wings)
newcolnames <- c("population", "ID"
                 , "X1", "Y1"
                 , "X2", "Y2"
                 , "X3", "Y3"
                 , "X4", "Y4"
                 , "X5", "Y5"
                 , "X6", "Y6"
                 , "X7", "Y7"
                 , "X8", "Y8"
                 , "X9", "Y9"
                 , "X10", "Y10"
                 , "X11", "Y11"
                 , "X12", "Y12"
                 , "X13", "Y13"
                 , "X14", "Y14"
                 , "X15", "Y15")

names(Left_Wings)[names(Left_Wings) == oldcolnames] <- newcolnames
names(Right_Wings)[names(Right_Wings) == oldcolnames] <- newcolnames
names(Average_Wings)[names(Average_Wings) == oldcolnames] <- newcolnames


Left_Wings_Arr <- Left_Wings %>%
  pivot_longer(
    cols = starts_with("X") | starts_with("Y"),
    names_to = c(".value", "index"),
    names_pattern = "([XY])(\\d+)"
  )

Right_Wings_Arr <- Right_Wings %>%
  pivot_longer(
    cols = starts_with("X") | starts_with("Y"),
    names_to = c(".value", "index"),
    names_pattern = "([XY])(\\d+)"
  )

Average_Wings_Arr <- Average_Wings %>%
  pivot_longer(
    cols = starts_with("X") | starts_with("Y"),
    names_to = c(".value", "index"),
    names_pattern = "([XY])(\\d+)"
  )

Left_Wings_Arr$wing <- "Left"
Right_Wings_Arr$wing <- "Right"
LR_Wings <- bind_rows(Left_Wings_Arr, Right_Wings_Arr)

write_csv(Average_Wings, file = "ZOP_AV_Wings.csv")

LR_Wings_tps <- LR_Wings %>% 
  group_by(ID) %>% 
  mutate(
    ID = ifelse(index == 1, ID, ""),
    population = ifelse(index == 1, population, ""),
    wing = ifelse(index == 1, wing, "")
  )%>% 
  select(ID, X, Y, population, wing) %>% 
  mutate(ID = str_replace(ID, "_", "="))


write_csv(LR_Wings_tps, file = "ZOP_LR_Wings.csv")


create.tps(input.filename = 'LR_Coords_ZOP.csv',
           output.filename = 'LR_Coords_ZOP.tps',
           id.factors = c('population', 'sex','wing','age','unique'))

create.tps(input.filename = 'AV_Coords_ZOP_transformed.csv',
           output.filename = 'AV_Coords_ZOP.tps',
           id.factors = c('wing', 'population','sex','age','unique'), # column names of metadata (id is automatically recognized)
           separator = "_")



coordsLR <- read.tps("LR_Coords_ZOP.tps")
coordAV <- read.tps('AV_Coords_ZOP.tps')
coords_LR <- align.procrustes(coordsLR, outlier.analysis = TRUE)
coords_AV <- align.procrustes(coordAV, outlier.analysis = TRUE)


LR_Wings_tps <- LR_Wings %>% 
  group_by(ID) %>% 
  mutate(
    ID = ifelse(index == 1, ID, ""),
    population = ifelse(index == 1, population, ""),
    wing = ifelse(index == 1, wing, "")
  )%>% 
  select(ID, X, Y, population, wing) %>% 
  mutate(ID = str_replace(ID, "_", "="))


write_csv(LR_Wings_tps, file = "LR_Wings_Deneme.csv")

create.tps(input.filename = 'LR_Wings_Deneme.csv',
           output.filename = 'LR_Coords_Deneme.tps',
           id.factors = c('wing', 'population'), # column names of metadata
           separator = "_")

coordsLR <- read.tps("LR_Coords_Deneme.tps")


coordsLR_proc <- align.procrustes(coordsLR, outlier.analysis = TRUE)
coordsAV_proc <- align.procrustes(coordsAV, outlier.analysis = TRUE)

LR_gdf <- geomorph.data.frame(shape = coordsLR_proc$gdf$coords,
                              ind = coordsLR_proc$gdf$population,
                              side = coordsLR_proc$gdf$wing,
                              group = coordsLR_proc$gdf$X2)
### Here, I checked the coordsLR_proc gdf structure and wrote the names of each variable accordingly
### the variable names were different

LR_FA <- bilat.symmetry(A = shape, ind = ind, side = side, replicate = group,
                        data = LR_gdf, object.sym = FALSE)
plot(LR_FA, warpgrids = TRUE)

# Reformatting results
FA_index <- LR_FA$unsigned.AI

FA_pop <- as.data.frame(list( FA = FA_index,
                              group = unique_id))
names(FA_pop) <- c("FA_index","group")


FA_anova <- aov(FA_index ~ group, data = FA_pop)
summary(FA_anova)

########################


LR_gdf2 <- geomorph.data.frame(
  shape = coordsLR_proc$gdf$coords,       # Procrustes-aligned coordinates
  ind = coordsLR_proc$gdf$specimen.id,    # Specimen identity
  side = coordsLR_proc$gdf$wing,          # Side of the wing
  group = coordsLR_proc$gdf$group         # Group or population
)



